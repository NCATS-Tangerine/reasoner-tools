
# TODO 1: Use Rosetta core config to construct multidirectional queries and validate paths.
#       https://github.com/NCATS-Gamma/robokop-interfaces/blob/master/greent/rosetta.yml

# TODO 2: Process asynchronously, and in parallel, as a workflow:
#       https://medium.com/@pavloosadchyi/parallel-running-dag-of-tasks-in-pythons-celery-4ea73c88c915

# python parser.py -w mq2.yaml -a drug_name=imatinib

workflow:

  drugs:
    doc: |
      Demonstrates an biolink-model enabled name to ID resolution interface using Bionames.
      For all operators, we store the result in a result node that can be referenced by subsequent steps.
    code: naming.to_id
    args:
      type: chemical_substance
      input: $drug_name

  to_process:
    doc: |
      Selects elements from the previous result, forms a machine question, and queries Gamma.
      The inputs arg supports a select language using
         select - A jsonpath_rw to index into the response of the previous step
         from   - The name of a completed worflow step
         where  - An equality expression constraining values of a selected column
         return - Required with where. Specifies which column to return
      Construct a machine question base don the given transtions in the question.
      For now, assume all edges flow in one direction from start type to end type.
      Create input nodes based on the type of the first element in transitions.
      For the nodes portion of the graph, create nodes with sequential ids for each element of transitions
    code: gamma
    args:
      inputs:
        select: $.[*].id
        from:   drugs
      question:
        transitions:
          - drug
          - gene
          - biological_process

  to_disease:
    doc: |
      A chained Gamma query with a more complex select statement.
    code: gamma
    args:
      inputs:
        select: answers[*].nodes[*].type,id
        from:   to_process
        where:  type=biological_process
        return: id
      question:
        transitions:
          - biological_process
          - cell
          - anatomical_entity
          - phenotypic_feature

  return:
    doc: |
      Union answers from preceeding steps.
    code: union
    args:
      elements: [ to_process, to_disease ]


              
