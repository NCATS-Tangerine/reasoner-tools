
# TODO 1: Use Rosetta core config to construct multidirectional queries and validate paths.
#       https://github.com/NCATS-Gamma/robokop-interfaces/blob/master/greent/rosetta.yml
#       This can be generalized with metadata from each module answering endpoint.
#       i.e. we should have enough information to assert to the user whether the requested path is traversable.
# 
# TODO 2: Process asynchronously, and in parallel, as a workflow:
#       https://medium.com/@pavloosadchyi/parallel-running-dag-of-tasks-in-pythons-celery-4ea73c88c915

# python parser.py -w mq2.yaml -a drug_name=imatinib

workflow:

  drugs:
    doc: |
      Demonstrates an biolink-model enabled name to ID resolution interface using Bionames.
      For all operators, we store the result in a result node that can be referenced by subsequent steps.
    code: name2id
    args:
      type: chemical_substance
      input: $drug_name

  diseases:
    doc: |
      Analogous English to ontological identifier transformation for disease.
    code: name2id
    args:
      type: disease
      input: $disease_name

  drug_to_phenotypic_feature:
    doc: |
      Selects elements from the previous result, forms a machine question, and queries Gamma.
      The inputs arg supports a select language using
         select - A jsonpath_rw to index into the response of the previous step
         from   - The name of a completed worflow step
         where  - An equality expression constraining values of a selected column
         return - Required with where. Specifies which column to return
      Construct a machine question based on the given transtions in the question.
      For now, assume all edges flow in one direction from start type to end type.
      Create input nodes based on the type of the first element in transitions.
      For the nodes portion of the graph, create nodes with sequential ids for each element of transitions
    code: gamma
    args:
      inputs:
        select: $.[*].id
        from: drugs
      question:
        transitions:
          - drug
          - gene
          - biological_process_or_activity
          - cell
#          - anatomical_entity
#          - phenotypic_feature

  disease_to_phenotypic_feature:
    doc: |
      A chained Gamma query with a more complex select statement.
    code: gamma
    args:
      inputs:
        select: $.[*].id
        from:   diseases
      question:
        transitions:
          - disease
          - phenotypic_feature

  disease_to_gene:
    doc: |
      A chained Gamma query with a more complex select statement.
    code: gamma
    args:
      inputs:
        select: $.[*].id
        from:   diseases
      question:
        transitions:
          - disease
          - gene

  return:
    doc: |
      Union answers from preceeding steps.
    code: union
    args:
      elements:
        - drug_to_phenotypic_feature
        - disease_to_phenotypic_feature
        - disease_to_gene



              
